import { EventType } from './ShellEvents';
export declare class ShellSdk {
    private target;
    private origin;
    private winRef;
    private outletMaximumDepth;
    static VERSION: string;
    static BUILD_TS: string;
    private static _instance;
    private isRoot;
    private postMessageHandler;
    private subscribersMap;
    private subscribersViewStateMap;
    private debugger;
    private outletsMap;
    private allowedOrigins;
    private ignoredOrigins;
    private constructor();
    static init(target: Window, origin: string, winRef?: Window, debugId?: string, outletMaximumDepth?: number): ShellSdk;
    static readonly instance: ShellSdk;
    static isInsideShell(): boolean;
    setAllowedOrigins(allowedOrigins?: string[] | '*'): void;
    addAllowedOrigin(url: string): void;
    removeAllowedOrigin(url: string): void;
    isOriginAllowed(url: string): boolean;
    setIgnoredOrigins(ignoredOrigins?: string[]): void;
    addIgnoredOrigin(url: string): void;
    removeIgnoredOrigin(url: string): void;
    registerOutlet(frame: HTMLIFrameElement, _name: string | undefined): void;
    unregisterOutlet(frame: HTMLIFrameElement): void;
    getTarget(): Window;
    setTarget(target: Window, origin: string): void;
    on: (type: string, subscriber: Function) => Function;
    onViewState: (key: string, subscriber: Function) => Function;
    off: (type: string, subscriber: Function) => void;
    offViewState: (key: string, subscriber: Function) => void;
    emit<T>(type: EventType, value: T, to?: string[]): void;
    setViewState(key: string, value: any): void;
    private removeSubscriber;
    private removeViewStateSubscriber;
    private initMessageApi;
    private onMessage;
}
